import { ComponentFixture, TestBed, async, fakeAsync, tick, ComponentFixtureAutoDetect } from '@angular/core/testing';
import { VulnerabilityConfigComponent } from "./vulnerability-config.component";
import { ErrorHandler, IServiceConfig, ScanningMetrics, SERVICE_CONFIG, SharedModule } from "../..";
import { ScanAllRepoService } from "./scanAll.service";
import { of } from "rxjs";
import { CUSTOM_ELEMENTS_SCHEMA } from "@angular/core";

let component: VulnerabilityConfigComponent;
let fixture: ComponentFixture<VulnerabilityConfigComponent>;
let config: IServiceConfig = {
    configurationEndpoint: '/api/configurations/testing'
};
let mockedSchedule = {"schedule": null};
let mockedScheduledMetrics: ScanningMetrics = {
  total: 50,
  completed: 50,
  metrics: {
    "Success": 20,
    "Error": 30,
  },
  ongoing: false
};
let mockedManualMetrics: ScanningMetrics = {
  total: 100,
  completed: 20,
  metrics: {
    "Error": 10,
    "Success": 20,
    "Running": 70
  },
  ongoing: true
};
let fakedScanAllRepoService = {
  getSchedule() {
    return of(mockedSchedule);
  },
  getScheduleMetrics() {
    return of(mockedScheduledMetrics);
  },
  getManualMetrics() {
    return of(mockedManualMetrics);
  },
  manualScan() {
    return of(true);
  },
  getScanners() {
    return of([]);
  }
};
let fakedErrorHandler = {
  info() {
    return null;
  }
};

describe('VulnerabilityConfigComponent', () => {
  beforeEach(async(() => {
    TestBed.configureTestingModule({
      imports: [
        SharedModule,
      ],
      schemas: [
          CUSTOM_ELEMENTS_SCHEMA
      ],
      declarations: [
        VulnerabilityConfigComponent
      ],
      providers: [
        {provide: ErrorHandler, useValue: fakedErrorHandler},
        {provide: ScanAllRepoService, useValue: fakedScanAllRepoService},
        { provide: SERVICE_CONFIG, useValue: config },
            // open auto detect
        { provide: ComponentFixtureAutoDetect, useValue: true }
      ]
    });
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(VulnerabilityConfigComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
     expect(component).toBeTruthy();
     const ele = fixture.nativeElement.querySelector('.finished');
     expect(ele.style.width).toEqual('40px');
  });
  it('should loop scheduled metrics if  scheduled scanning is on going', () => {
     component.scanningMetrics.isScheduled = true;
     component.scanningMetrics.ongoing = true;
     expect(component.scanAvailable).toBeFalsy();
  });
  it('will trigger scan now and get manual metrics', () => {
     const button = fixture.nativeElement.querySelector('#scan-now');
     button.click();
     const ele = fixture.nativeElement.querySelector('.finished');
     expect(ele.style.width).toEqual('40px');
  });
   it('should stop looping  manual metrics if manual scanning is finished', () => {
     component.scanningMetrics.isScheduled = false;
     component.scanningMetrics.ongoing = false;
     component.hasDefaultScanner = true;
     expect(component.scanAvailable).toBeTruthy();
  });
});
